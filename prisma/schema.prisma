generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id        String   @id @default(uuid())
    name      String
    email     String   @unique
    image     String?
    role      UserRole
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    properties Property[]
    bookings   Booking[]
    reviews    Review[]
    accounts   Account[]
    sessions   Session[]
}

model Property {
    id            String   @id @default(uuid())
    title         String
    description   String
    pricePerNight Float
    location      String
    userId        String
    host          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    rating        Float    @default(0.0)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    bookings Booking[]
    reviews  Review[]
}

model Booking {
    id           String   @id @default(uuid())
    renterId     String
    propertyId   String
    checkInDate  DateTime
    checkOutDate DateTime
    status       BookingStatus
    createdAt    DateTime @default(now())

    renter      User     @relation(fields: [renterId], references: [id], onDelete: Cascade)
    property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Review {
    id         String   @id @default(uuid())
    propertyId String
    renterId   String
    rating     Int
    comment    String
    createdAt  DateTime @default(now())

    property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    renter    User     @relation(fields: [renterId], references: [id], onDelete: Cascade)
}

enum UserRole {
    RENTER
    HOST
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELED
}
