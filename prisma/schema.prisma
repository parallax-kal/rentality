generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    role          UserRole
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    properties Property[]
    bookings   Booking[]
    reviews    Review[]
    accounts   Account[]
    sessions   Session[]
}

model Property {
    id            String   @id @default(uuid())
    title         String
    description   String
    pricePerNight Float
    location      String
    userId        String
    host          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    rating        Float    @default(0.0)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    bookings Booking[]
    reviews  Review[]
}

model Booking {
    id           String        @id @default(uuid())
    renterId     String
    propertyId   String
    checkInDate  DateTime
    checkOutDate DateTime
    status       BookingStatus
    createdAt    DateTime      @default(now())

    renter   User     @relation(fields: [renterId], references: [id], onDelete: Cascade)
    property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Review {
    id         String   @id @default(uuid())
    propertyId String
    renterId   String
    rating     Int
    comment    String
    createdAt  DateTime @default(now())

    property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    renter   User     @relation(fields: [renterId], references: [id], onDelete: Cascade)
}

enum UserRole {
    RENTER
    HOST
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELED
}
