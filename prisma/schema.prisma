generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(uuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(uuid())
    userId       String   @map("user_id")
    sessionToken String   @unique @map("session_token")
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String     @id @default(uuid())
    name          String
    email         String     @unique
    emailVerified DateTime?
    image         String?
    role          UserRole?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    accounts      Account[]
    bookings      Booking[]
    properties    Property[]
    reviews       Review[]
    sessions      Session[]

    @@map("users")
}

model Property {
    id            String    @id @default(uuid())
    title         String
    description   String
    pricePerNight Float     @map("price_per_night")
    location      String
    userId        String
    rating        Float     @default(0.0)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    bookings      Booking[]
    host          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    reviews       Review[]

    @@map("properties")
}

model Booking {
    id           String        @id @default(uuid())
    renterId     String        @map("renter_id")
    propertyId   String        @map("property_id")
    checkInDate  DateTime      @map("checking_date")
    checkOutDate DateTime      @map("checkout_date")
    status       BookingStatus
    createdAt    DateTime      @default(now())
    property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    renter       User          @relation(fields: [renterId], references: [id], onDelete: Cascade)

    @@map("bookings")
}

model Review {
    id         String   @id @default(uuid())
    renterId   String   @map("renter_id")
    propertyId String   @map("property_id")
    rating     Int
    comment    String
    createdAt  DateTime @default(now())
    property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    renter     User     @relation(fields: [renterId], references: [id], onDelete: Cascade)

    @@map("reviews")
}

enum UserRole {
    RENTER
    HOST
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELED
}
